{"version":3,"sources":["constants/actionTypes.js","reducers/index.js","reducers/posts.js","api/index.js","components/Posts/Post/styles.js","components/Posts/Post/Post.js","actions/posts.js","components/Posts/styles.js","components/Posts/Posts.js","components/Form/styles.js","components/Form/Form.js","images/memories.png","styles.js","App.js","index.js"],"names":["CREATE","UPDATE","DELETE","FETCH_ALL","combineReducers","posts","action","type","filter","post","_id","payload","map","url","updatePost","id","updatedPost","axios","patch","deletePost","delete","likePost","makeStyles","media","height","paddingTop","backgroundColor","backgroundBlendMode","border","fullHeightCard","card","display","flexDirection","justifyContent","borderRadius","position","overlay","top","left","color","overlay2","right","grid","details","margin","title","padding","cardActions","Post","setCurrentId","classes","useStyles","dispatch","useDispatch","Card","className","CardMedia","image","selectedFile","variant","creator","moment","createdAt","fromNow","Button","style","size","onClick","fontSize","tags","tag","gutterBottom","CardContent","component","message","CardActions","a","api","data","console","log","likeCount","theme","mainContainer","alignItems","smMargin","spacing","actionDiv","textAlign","Posts","useSelector","state","length","Grid","container","item","xs","sm","CircularProgress","root","paper","form","flexWrap","fileInput","width","buttonSubmit","marginBottom","Form","currentId","useState","postData","setPostData","find","p","useEffect","clear","Paper","autoComplete","noValidate","onSubmit","e","preventDefault","newPost","createPost","Typography","TextField","name","label","fullWidth","value","onChange","target","split","multiple","onDone","base64","appBar","heading","marginLeft","App","get","Container","maxWidth","AppBar","align","src","memories","alt","Grow","in","justify","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b2f4877.chunk.js","sourcesContent":["export const CREATE = 'CREATE';\nexport const UPDATE = 'UPDATE';\nexport const DELETE = 'DELETE';\nexport const FETCH_ALL = 'FETCH_ALL';\n\n","import { combineReducers } from 'redux';\n\nimport posts from './posts';\n\nexport default combineReducers({ posts });","import { FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\n\n\n// reducer is a function that accepts the posts and action (the state and action)\n\nexport default ( posts = [], action ) => {\n    // or could use switch statement\n\n    switch (action.type) {\n        case DELETE: \n            // return all the posts but filter out the one we deletd\n            return posts.filter((post) => post._id !== action.payload);\n        \n        case UPDATE: \n            // if post id is equal to action.payload, return it; it is the newly updated post : return post w/o updates \n            return posts.map((post) => post._id === action.payload._id ? action.payload : post );\n\n        case FETCH_ALL: \n            // returns the posts\n            return action.payload;\n\n        case CREATE:\n            return [...posts, action.payload];\n        default:\n            return posts;\n\n            \n    }\n}\n","import axios from 'axios';\n\n// url points to our backend routes\nconst url = 'https://memories-project-react-redux.herokuapp.com/posts';\n\n// make a call to get all the posts from the db\nexport const fetchPosts = () => axios.get(url);\nexport const createPost = (newPost) => axios.post(url, newPost);\nexport const updatePost = (id, updatedPost) => axios.patch(`${url}/${id}`, updatedPost);\nexport const deletePost = (id) => axios.delete(`${url}/${id}`);\n\nexport const likePost = (id) => axios.patch(`${url}/${id}/likePost`);","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles({\n  media: {\n    height: 0,\n    paddingTop: '56.25%',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    backgroundBlendMode: 'darken',\n  },\n  border: {\n    border: 'solid',\n  },\n  fullHeightCard: {\n    height: '100%',\n  },\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    borderRadius: '15px',\n    height: '100%',\n    position: 'relative',\n  },\n  overlay: {\n    position: 'absolute',\n    top: '20px',\n    left: '20px',\n    color: 'white',\n  },\n  overlay2: {\n    position: 'absolute',\n    top: '20px',\n    right: '20px',\n    color: 'white',\n  },\n  grid: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '20px',\n  },\n  title: {\n    padding: '0 16px',\n  },\n  cardActions: {\n    padding: '0 16px 8px 16px',\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n});","\nimport React from 'react';\nimport useStyles from './styles';\nimport { Card, CardActions, CardContent, CardMedia, Button } from '@material-ui/core';\nimport Typopgraphy from '@material-ui/core/Typography';\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport { deletePost, likePost } from '../../../actions/posts';\n\n\nconst Post = ( { post, setCurrentId }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    return (\n        <Card className={classes.card}>\n            <CardMedia className={classes.media} image={post.selectedFile} title={post.title}/>\n            <div className={classes.overlay}>\n                <Typopgraphy variant='h6'>{post.creator}</Typopgraphy>\n                <Typopgraphy variant='body2'>{moment(post.createdAt).fromNow()}</Typopgraphy>\n            </div>\n            <div className={classes.overlay2}>\n                <Button \n                    style={{color: 'white'}} \n                    size='small' \n                    onClick={() => setCurrentId(post._id)}\n                >\n                    <MoreHorizIcon fontSize='default'/>\n                </Button>\n            </div>\n            <div className={classes.details}>\n                <Typopgraphy variant='body2' color='textSecondary'>{post.tags.map((tag) => `#${tag} `)}</Typopgraphy>\n            </div>\n            <Typopgraphy variant='h5' className={classes.title} gutterBottom>{post.title}</Typopgraphy>\n            <CardContent>\n                <Typopgraphy variant='body2' color=\"texSecondary\" component=\"p\">{post.message}</Typopgraphy>\n            </CardContent>\n            <CardActions className={classes.cardActions}>\n                <Button size='small' color='primary' onClick={() => dispatch(likePost(post._id)) }>\n                    <ThumbUpAltIcon fontSize='small' />\n                    &nbsp; Like &nbsp;\n                    {post.likeCount}\n                </Button>\n                <Button size='small' color='primary' onClick={() => dispatch(deletePost(post._id)) }>\n                    <DeleteIcon fontSize='small' />\n                    Delete\n                </Button>\n            </CardActions>\n        </Card>\n    );\n}\n\n\nexport default Post;","import { FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\nimport * as api from '../api'; // imports everything from the actions as api.\n\n\n// Action Creators- are functions that return actions - actions is an object that contains a type and payload\n// we need to use redux thunk to create an async call to get access to dispatch\nexport const getPosts = () => async(dispatch) => { \n    try {\n        // fetch all the data from the api\n        const { data } = await api.fetchPosts(); // getting the response/data(posts) from the api, and will be returned from backend\n       \n        // dispatch the action from the data from the backend\n        dispatch ({ \n            type: FETCH_ALL,\n            payload: data\n        }); \n    } catch (error) {\n        console.log(error.message);\n    }\n    \n}\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const { data } = await api.createPost(post); // make a post api request \n\n        dispatch({\n            type: CREATE,\n            payload: data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {// make api request to update the post\n        const { data } = await api.updatePost(id, post);\n        dispatch({ \n            type: UPDATE,\n            payload: data\n        })\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id);\n        dispatch({\n            type: DELETE,\n            payload: id\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        const { data } = await api.likePost(id);\n        dispatch({ \n            type: UPDATE,\n            payload: data\n        })\n    } catch (error) {\n        console.log(error);\n    }\n}","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  mainContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: 'center',\n  },\n}));","import React from 'react';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\n\nimport Post from './Post/Post';\nimport useStyles from './styles';\n\nconst Posts = ({ setCurrentId }) => {\n    const posts = useSelector((state) => state.posts);\n\n    const classes = useStyles();\n    \n    console.log(posts);\n    {/* If there are no posts(true), show the cicular progress. If there are posts(false) show the posts */}\n    return (\n        !posts.length ? <CircularProgress /> : ( \n            <Grid className= { classes.container }  container alignItems=\"stretch\" spacing={3}>\n                {posts.map((post) => (\n                    <Grid key={post._id} item xs={12} sm={6}>\n                        {/* pass in props from post. aka props drilling: continue sending props over to the child components */}\n                        <Post post={post} setCurrentId={ setCurrentId }/>\n                    </Grid>\n                )) }\n\n            </Grid>\n        )\n    );\n}\n\n\nexport default Posts;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  fileInput: {\n    width: '97%',\n    margin: '10px 0',\n  },\n  buttonSubmit: {\n    marginBottom: 10,\n  },\n}));","import React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport FileBase from 'react-file-base64';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { createPost, updatePost } from '../../actions/posts';\n\nimport useStyles from './styles';\n\n// get current id from post you're on\nconst Form = ({ currentId, setCurrentId }) => {\n    const [postData, setPostData] = useState({\n        creator: '', \n        title: '', \n        message: '',\n        tags: '',\n        selectedFile: ''\n    });\n    // return updated post if it has the same id as current post id\n    const post = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null);\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(post) setPostData(post); // if post exists set the post data\n    }, [post])\n\n    // send over the post request with all the data the users submits\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(currentId) {\n            dispatch(updatePost(currentId, postData));\n        } else {\n            dispatch(createPost(postData)); // pass the post data from state to dispatch\n        }\n        \n        clear();\n    }\n    // clears the form\n    const clear = () => {\n        setCurrentId = null;\n        // update the state into empty values\n        setPostData({\n            creator: '', \n            title: '', \n            message: '',\n            tags: '',\n            selectedFile: ''\n        })\n    }\n\n\n    return (\n        <Paper className= { classes.paper }>\n            <form autoComplete='off' noValidate className={ `${classes.root} ${classes.form}` } onSubmit= { handleSubmit }>\n                <Typography variant='h6'>{ currentId ? 'Editing' : 'Creating' } a Memory</Typography>\n                <TextField \n                    name='creator' variant='outlined' label='Creator' fullWidth value={ postData.creator } // values stored in the state\n                    onChange={(e) => setPostData({ ...postData, creator: e.target.value })} \n                />\n                <TextField \n                    name='title' variant='outlined' label='Title' fullWidth value={ postData.title } // values stored in the state\n                    onChange={(e) => setPostData({ ...postData, title: e.target.value })} \n                />\n                <TextField \n                    name='message' variant='outlined' label='Message' fullWidth value={ postData.message } // values stored in the state\n                    onChange={(e) => setPostData({ ...postData, message: e.target.value })} \n                />\n                <TextField \n                    name='tags' variant='outlined' label='Tags' fullWidth value={ postData.tags } // values stored in the state\n                    onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} \n                />\n                <div className={ classes.fileInput }>\n                    <FileBase\n                        type= 'file'\n                        multiple= { false }\n                        onDone= {( { base64 } ) => setPostData({ ...postData, selectedFile: base64 })} \n                    />\n                </div>\n                <Button className={ classes.buttonSubmit } variant='contained' color='primary' size='large' type='submit' fullWidth>Submit</Button>\n                <Button variant='contained' color='secondary' size='small' onClick={ clear } fullWidth>Clear</Button>\n            </form>\n        </Paper>\n\n    );\n}\n\n\nexport default Form;","export default __webpack_public_path__ + \"static/media/memories.9cfa8a46.png\";","import { makeStyles } from '@material-ui/core/styles';\n\n\n\n\nexport default makeStyles((theme) => ({\n    appBar: {\n        borderRadius: 15,\n        margin: '30px 0',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n      heading: {\n        color: 'rgba(0,183,255, 1)',\n      },\n      image: {\n        marginLeft: '15px',\n      },\n    //   [theme.breakpoints.down('sm')]: {\n    //     mainContainer: {\n    //         flexDirection: \"column-reverse\"\n    //     }\n    //   }\n     \n}));","import React, { useState, useEffect } from 'react';\nimport { Container, AppBar, Typography, Grow, Grid } from '@material-ui/core';\n\n// dispatch an action\nimport { useDispatch } from 'react-redux';\n\n// dispatch the posts\nimport { getPosts } from './actions/posts';\n\nimport Posts from './components/Posts/Posts';\nimport Form from './components/Form/Form';\nimport memories from './images/memories.png';\nimport useStyles from './styles';\n\nconst App = () => {\n    const [currentId, setCurrentId] = useState(null);\n    const classes = useStyles();\n    const dispatch = useDispatch(); // a hook\n\n    useEffect(() => { // takes in a callback function\n        dispatch(getPosts()); // dispatches the action\n    }, [currentId, dispatch]);\n\n    return (\n       <Container maxWidth='lg'>\n            <AppBar className={ classes.appBar } position='static' color='inherit'>\n                <Typography className= { classes.heading } variant='h2' align='center'>Memories</Typography>\n                <img className={ classes.image } src={memories} alt='memories' height=\"60\"/>\n            </AppBar>\n            <Grow in>\n                <Container>\n                    <Grid className={classes.mainContainer} container justify='space-between' alignItems='stretch' spacing={3}>\n                        <Grid item xs={12} sm={7}>\n                            <Posts setCurrentId={setCurrentId}/>\n                        </Grid>\n                        <Grid item xs={12} sm={4}>\n                            <Form currentId={currentId} />\n                        </Grid>\n                    </Grid>\n                </Container>\n            </Grow>\n       </Container>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\n\n// provider keeps track of the store and allows us to access the store \n// anywhere in the app\nimport { Provider } from 'react-redux';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from './reducers';\n\nimport App from './App';\nimport './index.css';\n\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)) );\n\n\n\n\nReactDom.render(\n    <Provider store= { store }>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}